<!DOCTYPE html>
<!-- saved from url=(0031)http://localhost:8000/ring.html -->
<html class="gr__localhost"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Cosmic Engagement Ring</title>
  <link rel="stylesheet" href="./Cosmic Engagement Ring_files/main.css">
  <link rel="icon" href="http://localhost:8000/images/electronics.png">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script type="text/Javascript" src="./Cosmic Engagement Ring_files/three.js"></script>
  <script type="text/Javascript" src="./Cosmic Engagement Ring_files/STLLoader.js"></script>
  <script type="text/Javascript" src="./Cosmic Engagement Ring_files/Detector.js"></script>
</head>

<body data-gr-c-s-loaded="true">



  
    <div id="container">
       <div id="header2">
        <h4> <a href="http://localhost:8000/index.html">yasunaga.work</a></h4>
       </div>

      <div id="header">
        <h1> <a href="http://localhost:8000/ring.html">Cosmic Engagement Ring</a></h1>
      </div>
      <br>

    <div id="WebGL-output"> <canvas width="400" height="400" style="width: 400px; height: 400px;"></canvas></div> 

    <script src="./Cosmic Engagement Ring_files/three.js"></script>
    <script src="./Cosmic Engagement Ring_files/STLLoader.js"></script>
    <script src="./Cosmic Engagement Ring_files/Detector.js"></script>
    <script>

      var scene = new THREE.Scene({ antialias: true });
      scene.background = new THREE.Color( '#cccccc' );
      //scene.fog = new THREE.Fog( 0x72645b, 2, 15 );

      var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000);
      camera.position.set( 1, 3, -3);
      cameraTarget = new THREE.Vector3( 0, 0, 0 );

      var renderer = new THREE.WebGLRenderer();
      //renderer.setPixelRatio( window.devicePixelRatio );
      renderer.setSize( 400,400 );
      renderer.gammaInput = true;
      renderer.gammaOutput = true;
      renderer.shadowMap.enabled = true;

      contenedor = document.getElementById('WebGL-output');

      contenedor.appendChild(renderer.domElement);


      var loader = new THREE.STLLoader();
      // load a resource
      loader.load('models/ringbase.stl',function ( geometry ) {
        var material = new THREE.MeshPhongMaterial( { color: '#cccccc', specular: '#cccccc' , shininess: 100 } );
          var mesh = new THREE.Mesh( geometry, material );
          mesh.position.set( 0, -1, 0 );
          mesh.rotation.set( -Math.PI / 2, 0, 0 );
          mesh.scale.set( 0.1, 0.1, 0.1 );
          mesh.castShadow = true;
          mesh.receiveShadow = true;
          scene.add( mesh );
        } );



      //var plane = new THREE.Mesh(
         // new THREE.PlaneBufferGeometry( 100, 100 ),
         // new THREE.MeshPhongMaterial( { color: '#cccccc', specular: '#cccccc' } )
        //);
        //plane.rotation.x = -Math.PI/2;
       // plane.position.y = -4;
       // scene.add( plane );
       // plane.receiveShadow = true;



        scene.add( new THREE.HemisphereLight( 0x443333, 0x111122 ) );
        addShadowedLight( 1, 1, 1, 0xffffff, 1.35 );
        addShadowedLight( 0.5, 1, -1, 0xffaa00, 1 );

        //window.addEventListener( 'resize', onWindowResize, false );




    
    

    



      
       // function onWindowResize() {
        
       // camera.aspect = window.innerWidth/ window.innerHeight;

        //camera.updateProjectionMatrix();
       // renderer.setSize( window.innerWidth, window.innerHeight );

     // }

      function addShadowedLight( x, y, z, color, intensity ) {
        var directionalLight = new THREE.DirectionalLight( color, intensity );
        directionalLight.position.set( x, y, z );
        scene.add( directionalLight );
        directionalLight.castShadow = true;
        var d = 1;
        directionalLight.shadow.camera.left = -d;
        directionalLight.shadow.camera.right = d;
        directionalLight.shadow.camera.top = d;
        directionalLight.shadow.camera.bottom = -d;
        directionalLight.shadow.camera.near = 1;
        directionalLight.shadow.camera.far = 4;
        directionalLight.shadow.mapSize.width = 1024;
        directionalLight.shadow.mapSize.height = 1024;
        directionalLight.shadow.bias = -0.002;
      }


      



        



     // var geometry = new THREE.BoxGeometry( 0.5, 1, 1 );
     // var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
     // var cube = new THREE.Mesh( geometry, material );
      //scene.add( cube );

      //camera.position.z = 5;

      var animate = function () {
        requestAnimationFrame( animate );

        //cube.rotation.x += 0.1;
        //cube.rotation.y += 0.1;

        var timer = Date.now() * 0.0005;
        camera.position.x = Math.cos( timer ) * 3;
        camera.position.z = Math.sin( timer ) * 3;
        camera.lookAt( cameraTarget );

        renderer.render(scene, camera);
      };

      animate();









    </script>



     


       <img src="./Cosmic Engagement Ring_files/06.jpg">
       <img src="./Cosmic Engagement Ring_files/07.jpg" style="width:100%">

       

       <p>Cosmic Engagement Ring</p> 

       <p>Capriccio Selfie Palette is an improvisational still life making deviceâ€”an expanded selfie stick with a platform in the foreground. It is a tool to explore scale, and spatial and symbiotic relationships with small objects in a visual field. Capriccio is an painting style</p>


       <img src="./Cosmic Engagement Ring_files/08.jpg">

     


       

      





     </div>
  

    <div id="footer"></div>
  


</body></html>